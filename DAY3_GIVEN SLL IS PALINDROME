#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* next;
};

bool isPalindrome(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;
    struct Node* second_half;
    struct Node* prev_of_slow = head;
    struct Node* midnode = NULL;
    bool is_palindrome = true;

    if (head != NULL && head->next != NULL) {
        while (fast != NULL && fast->next != NULL) {
            fast = fast->next->next;
            prev_of_slow = slow;
            slow = slow->next;
        }

        if (fast != NULL) {
            midnode = slow;
            slow = slow->next;
        }

        second_half = slow;
        prev_of_slow->next = NULL;
        reverse(&second_half);
        is_palindrome = compareLists(head, second_half);
        reverse(&second_half);

        if (midnode != NULL) {
            prev_of_slow->next = midnode;
            midnode->next = second_half;
        } else {
            prev_of_slow->next = second_half;
        }
    }
    return is_palindrome;
}

void reverse(struct Node** head_ref) {
    struct Node* prev = NULL;
    struct Node* current = *head_ref;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head_ref = prev;
}

bool compareLists(struct Node* head1, struct Node* head2) {
    struct Node* temp1 = head1;
    struct Node* temp2 = head2;

    while (temp1 && temp2) {
        if (temp1->data == temp2->data) {
            temp1 = temp1->next;
            temp2 = temp2->next;
        } else {
            return false;
        }
    }

    if (temp1 == NULL && temp2 == NULL) {
        return true;
    }
    return false;
}

int main() {
    struct Node* head = NULL;
    int keys[] = {1, 2, 3, 2, 1};
    int n = sizeof(keys) / sizeof(keys[0]);

    for (int i = n - 1; i >= 0; i--) {
        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
        new_node->data = keys[i];
        new_node->next = head;
        head = new_node;
    }

    if (isPalindrome(head)) {
        printf("The linked list is a palindrome.\n");
    } else {
        printf("The linked list is not a palindrome.\n");
    }

    return 0;
}
